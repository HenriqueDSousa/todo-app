name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10.0, 3.11]
        django-version: [4.2, 5.0, 5.1]
        exclude:
          # Exclude incompatible combinations if needed
          - python-version: 3.9
            django-version: 5.1

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_todoapp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install django==${{ matrix.django-version }}
        pip install pytest-django
        pip install coverage
        pip install flake8
        pip install black
        pip install isort

    - name: Run code quality checks
      run: |
        # Check code formatting with black
        black --check --diff todoapp/
        
        # Check import sorting with isort
        isort --check-only --diff todoapp/
        
        # Run flake8 for linting
        flake8 todoapp/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Set up environment variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=todoapp.settings" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

    - name: Run database migrations
      working-directory: ./todoapp
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: Run all Django tests with coverage
      working-directory: ./todoapp
      run: |
        coverage run --source='.' manage.py test --verbosity=2
        coverage report --show-missing
        coverage xml

    - name: Run custom registration tests
      working-directory: ./todoapp
      run: |
        python test_registration.py

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11' && matrix.django-version == '5.1'
      uses: codecov/codecov-action@v3
      with:
        file: ./todoapp/coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-py${{ matrix.python-version }}-django${{ matrix.django-version }}
        path: |
          todoapp/coverage.xml
          todoapp/test-results.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
        
    - name: Run safety check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run bandit security linter
      run: |
        bandit -r todoapp/ -f json -o bandit-report.json || true
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment commands here
        echo "Staging deployment completed!"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment commands here
        echo "Production deployment completed!"

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always()
    
    steps:
    - name: Notify test results
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "‚úÖ All tests passed successfully!"
        else
          echo "‚ùå Some tests failed!"
          exit 1
        fi